name: Test strike-api

on: [push]

env:
  PYTHON_VERSION: "3.8"
  PACKAGE_FOLDER: strike_api
  TEST_FOLDER: tests
  COVERAGE_LIMIT: 90
    
jobs:
   build-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{env.PYTHON_VERSION}}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry && poetry build
   code-quality:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{env.PYTHON_VERSION}}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry && poetry install
    - name: Check codestlye with Black
      uses: psf/black@stable
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        # poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        # poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "skipping till flake8 + sphinx resolve conflict"
    - name: Security Analysis with bandit
      run: |
        mkdir ci-logs
        poetry run bandit -r -lll  -f txt -o ci-logs/bandit.log ${{env.PACKAGE_FOLDER}} ${{env.TEST_FOLDER}}
        
    - name: Archive bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: ci-logs/bandit.log

   code-coverage:
    needs: code-quality
    runs-on: ubuntu-latest
    env:
      STRIKE_API_KEY: ${{ secrets.STRIKE_DEV_KEY }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{env.PYTHON_VERSION}}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry && poetry install

    - name: Test with pytest
      run: |
        poetry install
        poetry run pytest ${{env.TEST_FOLDER}}  --cov-report=xml --cov=${{env.PACKAGE_FOLDER}} --junitxml=./coverage.xml
    - name: Archive code coverage xml report
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-report-xml
        path: coverage.xml
    - name: Uload Coverage Report to codecov
      uses: codecov/codecov-action@v3
      with:
        name: strike-api
        files: coverage.xml
        fail_ci_if_error: true